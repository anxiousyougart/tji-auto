name: Test TJI Setup

on:
  # Manual trigger only for testing
  workflow_dispatch:
    inputs:
      test_component:
        description: 'Component to test'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - environment
        - scrapers
        - config
        - messaging

env:
  # API Keys from GitHub Secrets (for testing)
  GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
  TINYURL_API_KEY: ${{ secrets.TINYURL_API_KEY }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TWILIO_PHONE_FROM: ${{ secrets.TWILIO_PHONE_FROM }}
  TWILIO_PHONE_TO: ${{ secrets.TWILIO_PHONE_TO }}
  
  # Test Configuration
  PYTHONPATH: ${{ github.workspace }}
  TJI_ENVIRONMENT: github_actions

jobs:
  test-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üîç Test Environment Setup
      if: ${{ github.event.inputs.test_component == 'all' || github.event.inputs.test_component == 'environment' }}
      run: |
        echo "üß™ ENVIRONMENT SETUP TEST"
        echo "========================="
        echo "Python version: $(python --version)"
        echo "Working directory: $(pwd)"
        echo "GitHub workspace: $GITHUB_WORKSPACE"
        echo "TJI environment: $TJI_ENVIRONMENT"
        echo ""
        
        echo "üìÅ Directory Structure:"
        for dir in scrapers processors data messaging tests docs config; do
          if [ -d "$dir" ]; then
            file_count=$(find "$dir" -name "*.py" | wc -l)
            echo "‚úÖ $dir/ ($file_count Python files)"
          else
            echo "‚ùå $dir/ missing"
          fi
        done
        echo ""
        
        echo "üîë Environment Variables:"
        echo "GROQ_API_KEY: ${{ secrets.GROQ_API_KEY != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        echo "TINYURL_API_KEY: ${{ secrets.TINYURL_API_KEY != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        echo "TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        echo "TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        echo "TWILIO_PHONE_FROM: ${{ secrets.TWILIO_PHONE_FROM != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        echo "TWILIO_PHONE_TO: ${{ secrets.TWILIO_PHONE_TO != '' && '‚úÖ Set' || '‚ùå Missing' }}"
        
    - name: ‚öôÔ∏è Test Configuration Import
      if: ${{ github.event.inputs.test_component == 'all' || github.event.inputs.test_component == 'config' }}
      run: |
        echo "‚öôÔ∏è CONFIGURATION IMPORT TEST"
        echo "============================"
        
        python -c "
        import sys
        import os
        sys.path.append('config')
        
        try:
            from config import get_groq_api_key, get_twilio_config, OUTPUT_FILES
            print('‚úÖ Config import successful')
            
            # Test API key functions
            groq_key = get_groq_api_key()
            print(f'‚úÖ Groq API key: {\"Available\" if groq_key else \"Missing\"}')
            
            twilio_config = get_twilio_config()
            print(f'‚úÖ Twilio config: {len([k for k, v in twilio_config.items() if v])} of 4 fields set')
            
            print(f'‚úÖ Output files: {len(OUTPUT_FILES)} configured')
            
        except Exception as e:
            print(f'‚ùå Config import failed: {e}')
            sys.exit(1)
        "
        
    - name: üï∑Ô∏è Test Scraper Imports
      if: ${{ github.event.inputs.test_component == 'all' || github.event.inputs.test_component == 'scrapers' }}
      run: |
        echo "üï∑Ô∏è SCRAPER IMPORT TEST"
        echo "====================="
        
        # Test individual scraper imports
        scrapers=("demo_tech_news.py" "internship_scraper.py" "jobs_scraper.py" "upskill_scraper.py" "webscraptest.py")
        
        for scraper in "${scrapers[@]}"; do
          echo "Testing $scraper..."
          if python -c "
            import sys
            import os
            sys.path.append('scrapers')
            sys.path.append('.')
            
            # Try to import the module
            import importlib.util
            spec = importlib.util.spec_from_file_location('test_module', 'scrapers/$scraper')
            if spec is None:
                raise ImportError('Cannot create spec')
            print('‚úÖ $scraper can be imported')
          " 2>/dev/null; then
            echo "‚úÖ $scraper import successful"
          else
            echo "‚ö†Ô∏è $scraper import issues (may be normal)"
          fi
        done
        
    - name: üì± Test Messaging Setup
      if: ${{ github.event.inputs.test_component == 'all' || github.event.inputs.test_component == 'messaging' }}
      run: |
        echo "üì± MESSAGING SETUP TEST"
        echo "======================"
        
        # Create a test message file
        mkdir -p data
        echo '{"drafted_message": "üß™ Test message from GitHub Actions TJI pipeline setup validation."}' > data/tji_daily_message.json
        
        # Test Twilio import and configuration
        python -c "
        import sys
        import os
        sys.path.append('messaging')
        sys.path.append('.')
        
        try:
            from twilio.rest import Client
            print('‚úÖ Twilio library available')
            
            # Test configuration
            from config.config import get_twilio_config
            config = get_twilio_config()
            
            required_fields = ['account_sid', 'auth_token', 'phone_from', 'phone_to']
            missing = [f for f in required_fields if not config.get(f)]
            
            if missing:
                print(f'‚ö†Ô∏è Missing Twilio config: {missing}')
            else:
                print('‚úÖ Twilio configuration complete')
                
                # Test client creation (don't send message)
                client = Client(config['account_sid'], config['auth_token'])
                print('‚úÖ Twilio client created successfully')
                
        except ImportError as e:
            print(f'‚ùå Twilio import failed: {e}')
        except Exception as e:
            print(f'‚ö†Ô∏è Twilio test issue: {e}')
        "
        
    - name: üìä Test Summary
      if: always()
      run: |
        echo "üìä TEST SUMMARY"
        echo "==============="
        echo "Test Component: ${{ github.event.inputs.test_component }}"
        echo "Repository: ${{ github.repository }}"
        echo "Test Time: $(date -u)"
        echo ""
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ ALL TESTS PASSED"
          echo "üöÄ Your TJI setup is ready for automation!"
          echo ""
          echo "üí° Next steps:"
          echo "  1. The daily workflow will run automatically at 14:30 UTC"
          echo "  2. You can manually trigger it from the Actions tab"
          echo "  3. Monitor the first few runs to ensure everything works"
          echo "  4. Check your WhatsApp for daily digest messages"
        else
          echo "‚ùå SOME TESTS FAILED"
          echo "üîß Please review the logs above and fix any issues"
          echo ""
          echo "üîç Common fixes:"
          echo "  ‚Ä¢ Ensure all GitHub secrets are properly configured"
          echo "  ‚Ä¢ Verify API keys are valid and have sufficient quotas"
          echo "  ‚Ä¢ Check Twilio WhatsApp number verification"
        fi
